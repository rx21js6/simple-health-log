/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.5.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    id 'war'
    id 'eclipse'
    // id 'eclipse-wtp'
    id "org.gretty" version "3.0.5"
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.18.0'
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral();
}

dependencies {
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'

    // https://mvnrepository.com/artifact/org.dbunit/dbunit
    testImplementation group: 'org.dbunit', name: 'dbunit', version: '2.7.0'

    // https://mvnrepository.com/artifact/org.jglue.cdi-unit/cdi-unit
    testImplementation group: 'org.jglue.cdi-unit', name: 'cdi-unit', version: '4.1.0'

    // https://mvnrepository.com/artifact/com.icegreen/greenmail
    testImplementation group: 'com.icegreen', name: 'greenmail', version: '1.6.5'

    // https://mvnrepository.com/artifact/org.jboss.weld.se/weld-se-core
    implementation group: 'org.jboss.weld.se', name: 'weld-se-core', version: '3.1.7.SP1'

    // Servlet + JSF
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

    // https://mvnrepository.com/artifact/javax.faces/javax.faces-api
    implementation group: 'javax.faces', name: 'javax.faces-api', version: '2.2'

    // https://mvnrepository.com/artifact/com.sun.faces/jsf-impl
    implementation group: 'com.sun.faces', name: 'jsf-impl', version: '2.2.20'

    // https://mvnrepository.com/artifact/net.bootsfaces/bootsfaces
    implementation group: 'net.bootsfaces', name: 'bootsfaces', version: '1.3.0'

    // https://mvnrepository.com/artifact/org.omnifaces/omnifaces
    // implementation group: 'org.omnifaces', name: 'omnifaces', version: '2.7.12'

    // Bean Validation
    // https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator
    implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.1.5.Final'

    // CDI
    // https://mvnrepository.com/artifact/org.jboss.weld.servlet/weld-servlet-shaded
    implementation group: 'org.jboss.weld.servlet', name: 'weld-servlet-shaded', version: '3.1.4.Final'

    // https://mvnrepository.com/artifact/org.jboss.weld/weld-spi
    // implementation group: 'org.jboss.weld', name: 'weld-spi', version: '3.1.SP2'

    // https://mvnrepository.com/artifact/org.apache.deltaspike/deltaspike
    // implementation group: 'org.apache.deltaspike', name: 'deltaspike', version: '1.8.2', ext: 'pom'

    // DB + JPA
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.20'

    // https://mvnrepository.com/artifact/org.eclipse.persistence/eclipselink
    implementation group: 'org.eclipse.persistence', name: 'eclipselink', version: '2.7.7'

    // JTA + Deltaspike
    // https://mvnrepository.com/artifact/javax.transaction/javax.transaction-api
    implementation group: 'javax.transaction', name: 'javax.transaction-api', version: '1.2'

    // https://mvnrepository.com/artifact/org.apache.deltaspike.modules/deltaspike-jpa-module-api
    implementation group: 'org.apache.deltaspike.modules', name: 'deltaspike-jpa-module-api', version: '1.8.2'

    // https://mvnrepository.com/artifact/org.apache.deltaspike.modules/deltaspike-jpa-module-impl
    implementation group: 'org.apache.deltaspike.modules', name: 'deltaspike-jpa-module-impl', version: '1.8.2'

    // https://mvnrepository.com/artifact/org.apache.deltaspike.cdictrl/deltaspike-cdictrl-weld
    implementation group: 'org.apache.deltaspike.cdictrl', name: 'deltaspike-cdictrl-weld', version: '1.8.2'

    // SLF4J + Logback
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'

    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    // mail
    // https://mvnrepository.com/artifact/com.sun.mail/javax.mail
    implementation group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'

    // https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

    // https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    // https://mvnrepository.com/artifact/com.sun.xml.bind/jaxb-impl
    implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.0.1'

    // Flyway
    // https://mvnrepository.com/artifact/org.flywaydb/flyway-core
    implementation group: 'org.flywaydb', name: 'flyway-core', version: '9.3.1'

    // Yaml
    // https://mvnrepository.com/artifact/org.yaml/snakeyaml
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.30'

    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.5.0'
}

task replaceTokenTest {
    doFirst {
        println("replaceTokenTest First")
    }

    doLast {
        println("replaceTokenTest doLast")
        def simpleHealthLogSettingPrefix = 'jp.nauplius.app.shl.setting'
        // persistence.xml
        def persistenceXmlFile = 'build/resources/test/META-INF/persistence.xml'
        def dbType = "test"
        println("dbType: " + dbType)

        def dbUrlToken = '@' + simpleHealthLogSettingPrefix + '.testDb.url@'
        def dbUserToken = '@' + simpleHealthLogSettingPrefix + '.testDb.user@'
        def dbPasswordToken = '@' + simpleHealthLogSettingPrefix + '.testDb.password@'

        def dbUrlPropKey = simpleHealthLogSettingPrefix + '.' + dbType + '.db.url'
        def dbUrlValue = System.getenv()['SIMPLE_HEALTH_LOG_DB_URL_TEST']
        if (project.hasProperty(dbUrlPropKey)) {
            dbUrlValue = project.property(dbUrlPropKey)
        }
        def dbUserPropKey = simpleHealthLogSettingPrefix + '.' + dbType + '.db.user'
        def dbUserValue = System.getenv()['SIMPLE_HEALTH_LOG_DB_USER_TEST']
        if (project.hasProperty(dbUserPropKey)) {
            dbUserValue = project.property(dbUserPropKey)
        }
        def dbPasswordValue = System.getenv()['SIMPLE_HEALTH_LOG_DB_PASSWORD_TEST']
        def dbPasswordPropKey = simpleHealthLogSettingPrefix + '.' + dbType + '.db.password'
        if (project.hasProperty(dbPasswordPropKey)) {
            dbPasswordValue = project.property(dbPasswordPropKey)
        }

        ant.replace(
            file: persistenceXmlFile,
            token: dbUrlToken,
            value: dbUrlValue
        )
        ant.replace(
            file: persistenceXmlFile,
            token: dbUserToken,
            value: dbUserValue
        )
        ant.replace(
            file: persistenceXmlFile,
            token: dbPasswordToken,
            value: dbPasswordValue
        )

        // mail-setting.xml
        def mailSmtpSettingXmlFile = 'build/resources/main/META-INF/mail-setting.xml'
        def mailActiveToken = '@' + simpleHealthLogSettingPrefix + '.mail.active@'
        def mailSmtpHostToken = '@' + simpleHealthLogSettingPrefix + '.mail.smtp.host@'
        def mailSmtpPortToken = '@' + simpleHealthLogSettingPrefix + '.mail.smtp.port@'
        def mailSmtpAuthToken = '@' + simpleHealthLogSettingPrefix + '.mail.smtp.auth@'
        // def mailSmtpUserIdToken = '@' + simpleHealthLogSettingPrefix + '.mail.smtp.userId@'
        // def mailSmtpPasswordToken = '@' + simpleHealthLogSettingPrefix + '.mail.smtp.password@'

        ant.replace(
            file: mailSmtpSettingXmlFile,
            token: mailActiveToken,
            value: 'true'
        )
        ant.replace(
            file: mailSmtpSettingXmlFile,
            token: mailSmtpHostToken,
            value: 'localhost'
        )
        ant.replace(
            file: mailSmtpSettingXmlFile,
            token: mailSmtpPortToken,
            value: '3025'
        )
        ant.replace(
            file: mailSmtpSettingXmlFile,
            token: mailSmtpAuthToken,
            value: 'false'
        )
/*
        ant.replace(
            file: mailSmtpSettingXmlFile,
            token: mailSmtpUserIdToken,
            value: mailSmtpUserIdValue
        )
        ant.replace(
            file: mailSmtpSettingXmlFile,
            token: mailSmtpPasswordToken,
            value: mailSmtpPasswordValue
        )
*/
    }
}

task replaceToken {
    doLast {
        println("replaceToken doLast");
        def simpleHealthLogSettingPrefix = 'jp.nauplius.app.shl.setting'
        // persistence.xml
        def persistenceXmlFile = 'build/resources/main/META-INF/persistence.xml'
        def dbType = project.property(simpleHealthLogSettingPrefix + '.' + 'dbType')
        println("dbType: " + dbType)

        def dbUrlToken = '@' + simpleHealthLogSettingPrefix + '.db.url@'
        def dbUserToken = '@' + simpleHealthLogSettingPrefix + '.db.user@'
        def dbPasswordToken = '@' + simpleHealthLogSettingPrefix + '.db.password@'

        def dbUrlPropKey = simpleHealthLogSettingPrefix + '.' + dbType + '.db.url'
        def dbUrlValue = System.getenv()['SIMPLE_HEALTH_LOG_DB_URL']
        if (project.hasProperty(dbUrlPropKey)) {
            dbUrlValue = project.property(dbUrlPropKey)
        }
        def dbUserPropKey = simpleHealthLogSettingPrefix + '.' + dbType + '.db.user'
        def dbUserValue = System.getenv()['SIMPLE_HEALTH_LOG_DB_USER']
        if (project.hasProperty(dbUserPropKey)) {
            dbUserValue = project.property(dbUserPropKey)
        }
        def dbPasswordValue = System.getenv()['SIMPLE_HEALTH_LOG_DB_PASSWORD']
        def dbPasswordPropKey = simpleHealthLogSettingPrefix + '.' + dbType + '.db.password'
        if (project.hasProperty(dbPasswordPropKey)) {
            dbPasswordValue = project.property(dbPasswordPropKey)
        }

        ant.replace(
            file: persistenceXmlFile,
            token: dbUrlToken,
            value: dbUrlValue
        )
        ant.replace(
            file: persistenceXmlFile,
            token: dbUserToken,
            value: dbUserValue
        )
        ant.replace(
            file: persistenceXmlFile,
            token: dbPasswordToken,
            value: dbPasswordValue
        )

        // mail-setting.xml
        def mailSmtpSettingXmlFile = 'build/resources/main/META-INF/mail-setting.xml'
        def mailActiveToken = '@' + simpleHealthLogSettingPrefix + '.mail.active@'
        def mailSmtpHostToken = '@' + simpleHealthLogSettingPrefix + '.mail.smtp.host@'
        def mailSmtpPortToken = '@' + simpleHealthLogSettingPrefix + '.mail.smtp.port@'
        def mailSmtpAuthToken = '@' + simpleHealthLogSettingPrefix + '.mail.smtp.auth@'
        def mailSmtpUserIdToken = '@' + simpleHealthLogSettingPrefix + '.mail.smtp.userId@'
        def mailSmtpPasswordToken = '@' + simpleHealthLogSettingPrefix + '.mail.smtp.password@'

        def mailActiveValue = 'false'
        def mailActivePropKey = simpleHealthLogSettingPrefix + '.mail.active'
        if (project.hasProperty(mailActivePropKey)) {
            mailActiveValue = project.property(mailActivePropKey)
        }

        def mailSmtpHostValue = 'localhost'
        def mailSmtpHostPropKey = simpleHealthLogSettingPrefix + '.mail.smtp.host'
        if (project.hasProperty(mailSmtpHostPropKey)) {
            mailSmtpHostValue = project.property(mailSmtpHostPropKey)
        }

        def mailSmtpPortValue = '25'
        def mailSmtpPortPropKey = simpleHealthLogSettingPrefix + '.mail.smtp.port'
        if (project.hasProperty(mailSmtpPortPropKey)) {
            mailSmtpPortValue = project.property(mailSmtpPortPropKey)
        }

        def mailSmtpAuthValue = 'false'
        def mailSmtpAuthPropKey = simpleHealthLogSettingPrefix + '.mail.smtp.auth'
        if (project.hasProperty(mailSmtpAuthPropKey)) {
            mailSmtpAuthValue = project.property(mailSmtpAuthPropKey)
        }

        def mailSmtpUserIdValue = ''
        def mailSmtpUserIdPropKey = simpleHealthLogSettingPrefix + '.mail.smtp.userId'
        if (project.hasProperty(mailSmtpUserIdPropKey)) {
            mailSmtpUserIdValue = project.property(mailSmtpUserIdPropKey)
        }

        def mailSmtpPasswordValue = ''
        def mailSmtpPasswordPropKey = simpleHealthLogSettingPrefix + '.mail.smtp.password'
        if (project.hasProperty(mailSmtpPasswordPropKey)) {
            mailSmtpPasswordValue = project.property(mailSmtpPasswordPropKey)
        }

        ant.replace(
            file: mailSmtpSettingXmlFile,
            token: mailActiveToken,
            value: mailActiveValue
        )
        ant.replace(
            file: mailSmtpSettingXmlFile,
            token: mailSmtpHostToken,
            value: mailSmtpHostValue
        )
        ant.replace(
            file: mailSmtpSettingXmlFile,
            token: mailSmtpPortToken,
            value: mailSmtpPortValue
        )
        ant.replace(
            file: mailSmtpSettingXmlFile,
            token: mailSmtpAuthToken,
            value: mailSmtpAuthValue
        )
        ant.replace(
            file: mailSmtpSettingXmlFile,
            token: mailSmtpUserIdToken,
            value: mailSmtpUserIdValue
        )
        ant.replace(
            file: mailSmtpSettingXmlFile,
            token: mailSmtpPasswordToken,
            value: mailSmtpPasswordValue
        )
    }
}
// war.dependsOn replaceToken
// test.dependsOn replaceTokenTest


application {
    // Define the main class for the application.
    // mainClassName = 'learn_webapp_gradle.App'
}

test {
    println("test")
    testLogging {
        exceptionFormat 'full'
    }
}

testClasses {
    println("testClasses")
    dependsOn("replaceTokenTest")
}

war {
    println("war")
    dependsOn("replaceToken")
}

gretty {
    // jettyXmlFile = 'src/main/webapp/WEB-INF/jetty-web.xml'
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    println("jacocoTestReport")
    dependsOn test // tests are required to run before generating the report
}

spotless {
  println("spotless")
  java {
    println("spotless - java")
    eclipse('4.26').configFile("code-style.xml")
    endWithNewline()
    removeUnusedImports()
    lineEndings("UNIX")
  }

  format 'misc', {
    println("spotless - misc")
    target '*.gradle'
    indentWithSpaces(4)
    endWithNewline()
    lineEndings('UNIX')
  }
}
